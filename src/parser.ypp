%{
#include "node.h"
#include "parsetree.h"

namespace {
  static int yylex(void);
  static void yyerror(const char*);

  const unsigned char* Text;
  const unsigned char* TextBegin;
  const unsigned char* TextEnd;

  ParseTree* Tree;

  bool LiteralMode;

  Node* add(const char*, const Node& n) {
    return Tree->add(n);
  }
}

%}

%union {
  unsigned int c;
  Node* node;
}

%token <c> CHAR
%token <c> DIGIT
%token <c> NAMED

%type <node> regexp alt concat rep number atom literal charclass charclass_right cc_named
%type <c>    character cc_char cc_char_first

%start regexp

%%

regexp: alt
  {
    Tree->Root = $$ = add("regexp", Node(Node::REGEXP, $1));
  }

alt:
  concat
| alt '|' concat
  {
    $$ = add("alt", Node(Node::ALTERNATION, $1, $3));
  }
;

concat:
  rep
| concat rep
  {
    $$ = add("concat", Node(Node::CONCATENATION, $1, $2));
  }
;

rep:
  atom
| atom '*' '?'
  {
    $$ = add("star_ng", Node(Node::REPETITION_NG, $1, 0, UNBOUNDED));
  }
| atom '+' '?'
  {
    $$ = add("plus_ng", Node(Node::REPETITION_NG, $1, 1, UNBOUNDED));
  }
| atom '?' '?'
  {
    $$ = add("question_ng", Node(Node::REPETITION_NG, $1, 0, 1));
  }
| atom '{' number '}' '?'
  {
    $$ = add("repetition_ng", Node(Node::REPETITION_NG, $1, $3->Val, $3->Val));
  }
| atom '{' number ',' '}' '?'
  {
    $$ = add("repetition_ng", Node(Node::REPETITION_NG, $1, $3->Val, UNBOUNDED));
  }
| atom '{' number ',' number '}' '?'
  {
    $$ = add("repetition_ng", Node(Node::REPETITION_NG, $1, $3->Val, $5->Val));
  }
| atom '*'
  {
    $$ = add("star", Node(Node::REPETITION, $1, 0, UNBOUNDED));
  }
| atom '+'
  {
    $$ = add("plus", Node(Node::REPETITION, $1, 1, UNBOUNDED));
  }
| atom '?'
  {
    $$ = add("question", Node(Node::REPETITION, $1, 0, 1));
  }
| atom '{' number '}'
  {
    $$ = add("repetition", Node(Node::REPETITION, $1, $3->Val, $3->Val));
  }
| atom '{' number ',' '}'
  {
    $$ = add("repetition", Node(Node::REPETITION, $1, $3->Val, UNBOUNDED));
  }
| atom '{' number ',' number '}'
  {
    $$ = add("repetition", Node(Node::REPETITION, $1, $3->Val, $5->Val));
  }
;

number:
  DIGIT
  {
    $$ = add("ignore", Node(Node::IGNORE, $1 - 48));
  }
| number DIGIT
  {
    $$ = $1;
    $$->Val = $$->Val*10 + ($2 - 48);
  }
;

atom:
  '(' alt ')'
  {
    $$ = $2;
  }
| literal
;

literal:
  character
  {
    $$ = add("literal", Node(Node::LITERAL, $1));
  }
| '.'
  {
    $$ = add("dot", Node(Node::DOT, '.'));
  }
| '[' '^' charclass ']'
  {
    $$ = $3;
    $$->Type = Node::CHAR_CLASS;
    $$->Bits.flip();
  }
| '[' charclass ']'
  {
    $$ = $2;
    $$->Type = Node::CHAR_CLASS;
  }
| cc_named
;

character:
  CHAR
| DIGIT
| ']'
  {
    $$ = ']';
  }
| '-'
  {
    $$ = '-';
  }
| '{'
  {
    $$ = '{';
  }
| '}'
  {
    $$ = '}';
  }
| ','
  {
    $$ = ',';
  }
;

charclass:
  cc_char_first '-' cc_char charclass_right
  {
    $$ = $4;
    $$->range($1, $3);
  }
| cc_char_first charclass_right
  {
    $$ = $2;
    $$->Bits.set($1);
  }
| cc_named charclass_right
  {
    $$ = $2;
    $$->Bits |= $1->Bits;
  }
;

charclass_right:
  cc_char '-' cc_char charclass_right
  {
    $$ = $4;
    $$->range($1, $3);
  }
| cc_char charclass_right
  {
    $$ = $2;
    $$->Bits.set($1);
  }
| cc_named charclass_right
  {
    $$ = $2;
    $$->Bits |= $1->Bits;
  }
| /* empty */
  {
    $$ = add("ignore", Node(Node::IGNORE, 'x'));
    $$->Bits.reset();
  }
;

cc_char_first:
  ']'
  {
    $$ = ']';
  }
| cc_char
;

cc_char:
  CHAR
| DIGIT
| '-'
  {
    $$ = '-';
  }
| '|'
  {
    $$ = '|';
  }
| '('
  {
    $$ = '(';
  }
| ')'
  {
    $$ = ')';
  }
| '?'
  {
    $$ = '?';
  }
| '+'
  {
    $$ = '+';
  }
| '*'
  {
    $$ = '*';
  }
| '.'
  {
    $$ = '.';
  }
| '['
  {
    $$ = '[';
  }
| '{'
  {
    $$ = '{';
  }
| '}'
  {
    $$ = '}';
  }
| ','
  {
    $$ = ',';
  }
;

cc_named:
  NAMED
  {
    switch ($1) {
      case 'd':
      {
        $$ = add("charclass", Node(Node::CHAR_CLASS, '0', '9'));
        break;
      }
      case 'D':
      {
        $$ = add("charclass", Node(Node::CHAR_CLASS, '0', '9'));
        $$->Bits.flip();
        break;
      }
      case 's':
      {
        $$ = add("charclass", Node(Node::CHAR_CLASS, ' '));
        $$->Bits.set('\t');
        $$->Bits.set('\n');
        $$->Bits.set('\f');
        $$->Bits.set('\r');
        break;
      }
      case 'S':
      {
        $$ = add("charclass", Node(Node::CHAR_CLASS, ' '));
        $$->Bits.set('\t');
        $$->Bits.set('\n');
        $$->Bits.set('\f');
        $$->Bits.set('\r');
        $$->Bits.flip();
        break;
      }
      case 'w':
      {
        $$ = add("charclass", Node(Node::CHAR_CLASS, '_'));
        $$->range('a', 'z');
        $$->range('A', 'Z');
        $$->range('0', '9');
        break;
      }
      case 'W':
      {
        $$ = add("charclass", Node(Node::CHAR_CLASS, '_'));
        $$->range('a', 'z');
        $$->range('A', 'Z');
        $$->range('0', '9');
        $$->Bits.flip();
        break;
      }
    }
  }
;
%%

namespace {
  int parseHexChar(unsigned int c) {
    int val = -1;
    if ('0' <= c && c <= '9') {
      val = (c - '0');
    }
    else if ('a' <= c && c <= 'f') {
      val = (c - 'a' + 10);
    }
    else if ('A' <= c && c <= 'F') {
      val = (c - 'A' + 10);
    }
    return val;
  }

  int consumeHexCode() {
    if (Text + 1 < TextEnd) {
      unsigned char one = *Text++,
                    two = *Text++;
      int val = parseHexChar(one),
          ret;
      if (val < 0) {
        return val;
      }
      ret = val;
      ret <<= 4;
      val = parseHexChar(two);
      if (val < 0) {
        return val;
      }
      ret += val;
      yylval.c = ret;
      return CHAR;
    }
    return -1;
  }

// FIXME: Add octal escapes.
// FIXME: Add \c.
// FIXME: \b is not parsed correctly---should be backspace (0x08) inside
// character classes, and a wordbreak assertion elsewhere.

  int consumeEscape() {
    if (Text >= TextEnd) {
      return -1;
    }

    const unsigned int c = *Text++;
    switch (c) {
      // metacharacters as themselves
      case '|':
      case '(':
      case ')':
      case '?':
      case '+':
      case '*':
      case '.':
      case '[':
      case ']':
      case '^':
      case '-':
      case '{':
      case '}':
      case '\\':
        yylval.c = c;
        return CHAR;

      // ASCII escapes
      case 'a':
        yylval.c = '\a';
        return CHAR;
      case 'e':
        yylval.c = '\e';
        return CHAR;
      case 'f':
        yylval.c = '\f';
        return CHAR;
      case 'n':
        yylval.c = '\n';
        return CHAR;
      case 'r':
        yylval.c = '\r';
        return CHAR;
      case 't':
        yylval.c = '\t';
        return CHAR;

      // named character classes
      case 'd':
      case 'D':
      case 's':
      case 'S':
      case 'w':
      case 'W':
        yylval.c = c;
        return NAMED;

      // hexadecimal characters
      case 'x':
        return consumeHexCode();

      default:
        return -1;
    }
  }

  int yylex(void) {
    if (Text < TextEnd) {
      const unsigned int c = *Text++;
      if (LiteralMode) {
        yylval.c = c;
        return CHAR;
      }
      else {
        switch (c) {
          case 0:
            return -1;
          case '|':
          case '(':
          case ')':
          case '?':
          case '+':
          case '*':
          case '.':
          case '[':
          case ']':
          case '^':
          case '-':
          case '{':
          case '}':
          case ',':
            return c;
          case '\\':
            return consumeEscape();
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            yylval.c = c;
            return DIGIT;
          default:
            yylval.c = c;
            return CHAR;
        }
      }
    }
    return -1;
  }

  void yyerror(const char* msg) {
    THROW_RUNTIME_ERROR_WITH_OUTPUT(msg);
  }
}

bool parse(const std::string& text, bool litMode, ParseTree& tree) {
  LiteralMode = litMode;

  Text = (unsigned char*)text.c_str();
  TextBegin = Text;
  TextEnd = Text + text.size();

  Tree = &tree;
  Tree->init(text.size());

  const int ret = yyparse();

  Text = 0;
  Tree = 0;
  return ret == 0;
}
