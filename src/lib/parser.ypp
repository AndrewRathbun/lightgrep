%code requires {
#include "parsenode.h"
#include "parsetree.h"
#include "parseutil.h"
#include "pattern.h"
#include "unicode.h"
#include "encoders/utf8.h"

#include <iomanip>
#include <sstream>
#include <string>
#include <vector>

namespace {
  struct Context {
    const int* Text;
    const int* TextBegin;
    const int* TextEnd;

    ParseTree* Tree;

    UnicodeSet USet;

    bool LiteralMode;
    bool CaseInsensitive;

    ParseNode* add(const ParseNode& n) {
      return Tree->add(n);
    }

    template <class... Args>
    ParseNode* add(Args&&... args) {
      return Tree->add(args...);
    }
  };

  union YYSTYPE {
    unsigned int c;
    ParseNode* node;
    UnicodeSet* s;
  };

  static int yylex(YYSTYPE* yylval, Context* ctx);
  static void yyerror(Context* ctx, const char* msg);

  void backwardsRepRangeError(Context* ctx, int a, int b);
  void backwardsRepNGRangeError(Context* ctx, int a, int b);
  void backwardsCharRangeError(Context* ctx, int a, int b);
  void backwardsByteRangeError(Context* ctx, int a, int b);
}

//extern int yydebug;
}

%define api.pure
%lex-param { Context* ctx }
%parse-param { Context* ctx }

%expect 198

//%debug

%error-verbose

%token <c> BYTE
%token <c> CHAR
%token <c> DIGIT
%token <c> BAD
%token <s> SET

%type <node> regexp alt concat rep number atom literal charclass cc_named cc_expr cc_expr_first
%type <c> character cc_char cc_char_first cc_char_not_first

%type <c> UNION INTERSECT MINUS XOR LEAST

%left LEAST
%left UNION
%left INTERSECT MINUS XOR
%nonassoc '-'

%start regexp

%%

regexp:
  alt
  {
    ctx->Tree->Root = $$ = ctx->add(ParseNode::REGEXP, $1);
  }
;

alt:
  concat
| alt '|' concat
  {
    $$ = ctx->add(ParseNode::ALTERNATION, $1, $3);
  }
;

concat:
  rep
| concat rep
  {
    $$ = ctx->add(ParseNode::CONCATENATION, $1, $2);
  }
;

rep:
  atom
| atom '*' '?'
  {
    $$ = ctx->add(ParseNode::REPETITION_NG, $1, 0, UNBOUNDED);
  }
| atom '+' '?'
  {
    $$ = ctx->add(ParseNode::REPETITION_NG, $1, 1, UNBOUNDED);
  }
| atom '?' '?'
  {
    $$ = ctx->add(ParseNode::REPETITION_NG, $1, 0, 1);
  }
| atom '{' number '}' '?'
  {
    $$ = ctx->add(ParseNode::REPETITION_NG, $1, $3->Val, $3->Val);
  }
| atom '{' number ',' '}' '?'
  {
    $$ = ctx->add(ParseNode::REPETITION_NG, $1, $3->Val, UNBOUNDED);
  }
| atom '{' number ',' number '}' '?'
  {
    if ($3->Val > $5->Val) {
      // {n,m} is ill-formed when n > m
      backwardsRepNGRangeError(ctx, $3->Val, $5->Val);
    }
    else {
      $$ = ctx->add(ParseNode::REPETITION_NG, $1, $3->Val, $5->Val);
    }
  }
| atom '*'
  {
    $$ = ctx->add(ParseNode::REPETITION, $1, 0, UNBOUNDED);
  }
| atom '+'
  {
    $$ = ctx->add(ParseNode::REPETITION, $1, 1, UNBOUNDED);
  }
| atom '?'
  {
    $$ = ctx->add(ParseNode::REPETITION, $1, 0, 1);
  }
| atom '{' number '}'
  {
    $$ = ctx->add(ParseNode::REPETITION, $1, $3->Val, $3->Val);
  }
| atom '{' number ',' '}'
  {
    $$ = ctx->add(ParseNode::REPETITION, $1, $3->Val, UNBOUNDED);
  }
| atom '{' number ',' number '}'
  {
    if ($3->Val > $5->Val) {
      // {n,m} is ill-formed when n > m
      backwardsRepRangeError(ctx, $3->Val, $5->Val);
    }
    else {
      $$ = ctx->add(ParseNode::REPETITION, $1, $3->Val, $5->Val);
    }
  }
;

number:
  DIGIT
  {
    $$ = ctx->add(ParseNode::TEMPORARY, $1 - 48);
  }
| number DIGIT
  {
    $$ = $1;
    $$->Val = $$->Val*10 + ($2 - 48);
  }
;

atom:
  '(' alt ')'
  {
    $$ = $2;
  }
| literal
;

literal:
  BYTE
  {
    $$ = ctx->add(ParseNode::BYTE, $1);
  }
| character
  {
    if (ctx->CaseInsensitive) {
      ctx->USet.reset();
      ctx->USet.set($1);
      if (caseDesensitize(ctx->USet)) {
        // TODO: Maybe handle the commmon ASCII case without going via USet?
        $$ = ctx->add(ParseNode::CHAR_CLASS, ctx->USet);
      }
      else {
        $$ = ctx->add(ParseNode::LITERAL, $1);
      }
    }
    else {
      $$ = ctx->add(ParseNode::LITERAL, $1);
    }
  }
| '.'
  {
    $$ = ctx->add(ParseNode::DOT, '.');
  }
| charclass
;

character:
  CHAR
| DIGIT
| ']'
  {
    $$ = ']';
  }
| '-'
  {
    $$ = '-';
  }
| '{'
  {
    $$ = '{';
  }
| '}'
  {
    $$ = '}';
  }
| ','
  {
    $$ = ',';
  }
| '&'
  {
    $$ = '&';
  }
| '~'
  {
    $$ = '~';
  }
;

charclass:
  '[' cc_expr_first ']'
  {
    $$ = $2;

    if (ctx->CaseInsensitive) {
      caseDesensitize($$->CodePoints);
    }

    if ($$->CodePoints.none() && $$->Breakout.Bytes.none()) {
      // empty character class
      yyerror(ctx, "syntax error: empty character class");
    }
  }
| '[' '^' cc_expr ']'
  {
    $$ = $3;

    if ($$->CodePoints.any()) {
      // NB: PCRE applies case-insensitivity first, then negation. This is
      // important, as these two operations do not commute on a cc such as
      // [^a]. Let U be the set of all Unicode code points. Negating first
      // gives U / {a}, which becomes U again when closing under case-
      // insensitivity, due to A being a member of U / {a}, while closing
      // under case-insensitivity first gives {A, a}, which becomes
      // U / {A, a} after negation.

      if (ctx->CaseInsensitive) {
        caseDesensitize($$->CodePoints);
      }

      $$->CodePoints.flip();
      if ($$->CodePoints.none()) {
        // empty character class
        yyerror(ctx, "syntax error: empty character class");
      }

      if ($$->Breakout.Bytes.any()) {
        $$->Breakout.Additive = false;
      }
    }
    else if ($$->Breakout.Bytes.any()) {
      $$->Breakout.Bytes.flip();
      if ($$->Breakout.Bytes.none()) {
        // empty character class
        yyerror(ctx, "syntax error: empty character class");
      }
    }
    else {
      // empty inner character class
      $$->CodePoints.flip();
    }
  }
| cc_named
  {
    if (ctx->CaseInsensitive) {
      caseDesensitize($$->CodePoints);
    }
  }
;

cc_expr_first:
  cc_expr_first cc_expr %prec UNION
  {
    $$ = $1;
    $$->CodePoints |= $2->CodePoints;
    $$->Breakout.Bytes |= $2->Breakout.Bytes;
  }
| cc_expr_first '&' '&' cc_expr %prec INTERSECT
  {
    $$ = $1;
    $$->CodePoints &= $4->CodePoints;
    $$->Breakout.Bytes &= $4->Breakout.Bytes;
  }
| cc_expr_first '-' '-' cc_expr %prec MINUS
  {
    $$ = $1;
    $$->CodePoints -= $4->CodePoints;
    $$->Breakout.Bytes -= $4->Breakout.Bytes;
  }
| cc_expr_first '~' '~' cc_expr %prec XOR
  {
    $$ = $1;
    $$->CodePoints ^= $4->CodePoints;
    $$->Breakout.Bytes ^= $4->Breakout.Bytes;
  }
| cc_char_first '-' cc_char_not_first
  {
    if ($3 <= $1) {
      // x-y is ill-formed when y <= x
      backwardsCharRangeError(ctx, $1, $3);
    }

    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->CodePoints.insert($1, $3 + 1);
  }
| BYTE '-' BYTE
  {
    if ($3 <= $1) {
      // x-y is ill-formed when y <= x
      backwardsByteRangeError(ctx, $1, $3);
    }

    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->Breakout.Bytes.set($1, $3 + 1, true);
  }
| charclass
| cc_char_first %prec LEAST
  {
    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->CodePoints.set($1);
  }
| BYTE %prec LEAST
  {
    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->Breakout.Bytes.set($1);
  }
;

cc_expr:
  cc_expr cc_expr %prec UNION
  {
    $$ = $1;
    $$->CodePoints |= $2->CodePoints;
    $$->Breakout.Bytes |= $2->Breakout.Bytes;
  }
| cc_expr '&' '&' cc_expr %prec INTERSECT
  {
    $$ = $1;
    $$->CodePoints &= $4->CodePoints;
    $$->Breakout.Bytes &= $4->Breakout.Bytes;
  }
| cc_expr '-' '-' cc_expr %prec MINUS
  {
    $$ = $1;
    $$->CodePoints -= $4->CodePoints;
    $$->Breakout.Bytes -= $4->Breakout.Bytes;
  }
| cc_char_not_first '-' '-' cc_expr %prec MINUS
  {
    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->CodePoints.set($1);
    $$->CodePoints -= $4->CodePoints;
  }
| BYTE '-' '-' cc_expr %prec MINUS
  {
    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->Breakout.Bytes.set($1);
    $$->Breakout.Bytes -= $4->Breakout.Bytes;
}
| cc_expr '~' '~' cc_expr %prec XOR
  {
    $$ = $1;
    $$->CodePoints ^= $4->CodePoints;
    $$->Breakout.Bytes ^= $4->Breakout.Bytes;
  }
| cc_char_not_first '-' cc_char_not_first
  {
    if ($3 <= $1) {
      // x-y is ill-formed when y <= x
      backwardsCharRangeError(ctx, $1, $3);
    }

    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->CodePoints.insert($1, $3 + 1);
  }
| BYTE '-' BYTE
  {
    if ($3 <= $1) {
      // x-y is ill-formed when y <= x
      backwardsByteRangeError(ctx, $1, $3);
    }

    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->Breakout.Bytes.set($1, $3 + 1, true);
  }
| charclass
| cc_char_not_first %prec LEAST
  {
    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->CodePoints.set($1);
  }
| BYTE %prec LEAST
  {
    $$ = ctx->add(ParseNode::CHAR_CLASS, 'x');
    $$->Breakout.Bytes.set($1);
  }
;

cc_char_first:
  ']'
  {
    $$ = ']';
  }
| cc_char
;

cc_char_not_first:
  '^'
  {
    $$ = '^';
  }
| cc_char
;

cc_char:
  CHAR
| DIGIT
/*
| '-'
  {
    $$ = '-';
  }
*/
| '|'
  {
    $$ = '|';
  }
| '('
  {
    $$ = '(';
  }
| ')'
  {
    $$ = ')';
  }
| '?'
  {
    $$ = '?';
  }
| '+'
  {
    $$ = '+';
  }
| '*'
  {
    $$ = '*';
  }
| '.'
  {
    $$ = '.';
  }
| '['
  {
    $$ = '[';
  }
| '{'
  {
    $$ = '{';
  }
| '}'
  {
    $$ = '}';
  }
| ','
  {
    $$ = ',';
  }
;

cc_named:
  SET
  {
    $$ = ctx->add(ParseNode::CHAR_CLASS, ctx->USet);
  }
;

%%

namespace {

  void backwardsRepRangeError(Context* ctx, int a, int b) {
    std::stringstream ss;
    ss << "syntax error: " << a << " > " << b
       << " in {" << a << ',' << b << "}";
    yyerror(ctx, ss.str().c_str());
  }

  void backwardsRepNGRangeError(Context* ctx, int a, int b) {
    std::stringstream ss;
    ss << "syntax error: " << a << " > " << b
       << " in {" << a << ',' << b << "}?";
    yyerror(ctx, ss.str().c_str());
  }

  void backwardsCharRangeError(Context* ctx, int a, int b) {
    UTF8 enc;
    byte abuf[5]{}, bbuf[5]{};

    enc.write(a, abuf);
    enc.write(b, bbuf);

    std::stringstream ss;
    ss << "syntax error: " << abuf << " >= " << bbuf
       << " in " << abuf << '-' << bbuf;
    yyerror(ctx, ss.str().c_str());
  }

  void backwardsByteRangeError(Context* ctx, int a, int b) {
    std::stringstream ss;
    ss << "syntax error: 0x"
       << std::hex << std::uppercase << std::setfill('0')
       << std::setw(2) << a << " >= 0x"
       << std::setw(2) << b
       << " in \\z"
       << std::setw(2) << a << "-\\z"
       << std::setw(2) << b;
    yyerror(ctx, ss.str().c_str());
  }

  template <typename F>
  int consumeSingleton(F func, yytokentype type, YYSTYPE* yylval, Context* ctx) {
    const int val = func(ctx->Text, ctx->TextEnd);
    if (val < 0) {
      return BAD;
    }
    else {
      yylval->c = val;
      return type;
    }
  }

  template <typename F, typename Itr>
  int consumeSet(F func, YYSTYPE* yylval, Itr& beg, const Itr& end, UnicodeSet& us) {
    const int val = func(beg, end, us);
    if (val < 0) {
      return BAD;
    }
    else {
      yylval->s = &us;
      return SET;
    }
  }

  template <typename F>
  int consumeSet(F func, YYSTYPE* yylval, Context* ctx) {
    return consumeSet(func, yylval, ctx->Text, ctx->TextEnd, ctx->USet);
  }

// FIXME: Add \c.
// FIXME: \b is not parsed correctly---should be backspace (0x08) inside
//  character classes, and a wordbreak assertion elsewhere.

  int consumeEscape(YYSTYPE* yylval, Context* ctx) {
    if (ctx->Text >= ctx->TextEnd) {
      return BAD;
    }

    const int c = *ctx->Text++;
    switch (c) {
    // metacharacters as themselves
    case '|':
    case '(':
    case ')':
    case '?':
    case '+':
    case '*':
    case '.':
    case '[':
    case ']':
    case '^':
    case '-':
    case '{':
    case '}':
    case '&':
    case '~':
    case '\\':
      yylval->c = c;
      return CHAR;

    // ASCII escapes
    case 'a':
      yylval->c = '\a';
      return CHAR;
    case 'e':
      yylval->c = 0x1B;
      return CHAR;
    case 'f':
      yylval->c = '\f';
      return CHAR;
    case 'n':
      yylval->c = '\n';
      return CHAR;
    case 'r':
      yylval->c = '\r';
      return CHAR;
    case 't':
      yylval->c = '\t';
      return CHAR;

    // named character classes
    case 'd':
      ctx->USet.reset();
      ctx->USet.insert('0', '9' + 1);
      yylval->s = &ctx->USet;
      return SET;

    case 'D':
      ctx->USet.reset();
      ctx->USet.insert('0', '9' + 1);
      ctx->USet.flip();
      yylval->s = &ctx->USet;
      return SET;

    case 's':
      ctx->USet.reset();
      ctx->USet.set('\t');
      ctx->USet.set('\n');
      ctx->USet.set('\f');
      ctx->USet.set('\r');
      ctx->USet.set(' ');
      yylval->s = &ctx->USet;
      return SET;

    case 'S':
      ctx->USet.reset();
      ctx->USet.set('\t');
      ctx->USet.set('\n');
      ctx->USet.set('\f');
      ctx->USet.set('\r');
      ctx->USet.set(' ');
      ctx->USet.flip();
      yylval->s = &ctx->USet;
      return SET;

    case 'w':
      ctx->USet.reset();
      ctx->USet.insert('0', '9' + 1);
      ctx->USet.insert('A', 'Z' + 1);
      ctx->USet.set('_');
      ctx->USet.insert('a', 'z' + 1);
      yylval->s = &ctx->USet;
      return SET;

    case 'W':
      ctx->USet.reset();
      ctx->USet.insert('0', '9' + 1);
      ctx->USet.insert('A', 'Z' + 1);
      ctx->USet.set('_');
      ctx->USet.insert('a', 'z' + 1);
      ctx->USet.flip();
      yylval->s = &ctx->USet;
      return SET;

    // hexadecimal characters
    case 'x':
      if (ctx->Text == ctx->TextEnd) {
        return BAD;
      }
      else if (*ctx->Text == '{') {
        ++ctx->Text;
        return consumeSingleton(parseHexCodePoint<const int*>, CHAR, yylval, ctx);
      }
      else {
        return consumeSingleton(parseHexByte<const int*>, CHAR, yylval, ctx);
      }

    // breakout bytes
    case 'z':
      return consumeSingleton(parseHexByte<const int*>, BYTE, yylval, ctx);

    // octal characters
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      --ctx->Text;
      return consumeSingleton(parseOctByte<const int*>, CHAR, yylval, ctx);

    // named Unicode code points
    case 'N':
      return consumeSingleton(parseNamedCodePoint<const int*>, CHAR, yylval, ctx);

    // Unicode properties
    case 'p':
    case 'P':
      ctx->Text -= 2;
      return consumeSet(parseProperty<const int*>, yylval, ctx);

    default:
      return BAD;
    }
  }

  int yylex(YYSTYPE* yylval, Context* ctx) {
    if (ctx->Text < ctx->TextEnd) {
      const int c = *ctx->Text++;
      if (c < 1) {
        //   -1 indicates bogus UTF-8
        //    0 is a prohibited mid-string null byte
        return BAD;
      }
      else if (ctx->LiteralMode) {
        yylval->c = c;
        return CHAR;
      }
      else {
        switch (c) {
        case '|':
        case '(':
        case ')':
        case '?':
        case '+':
        case '*':
        case '.':
        case '[':
        case ']':
        case '^':
        case '-':
        case '{':
        case '}':
        case '&':
        case '~':
        case ',':
          return c;
        case '\\':
          return consumeEscape(yylval, ctx);
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          yylval->c = c;
          return DIGIT;
        default:
          yylval->c = c;
          return CHAR;
        }
      }
    }
    return -1;
  }

  void yyerror(Context* ctx, const char* msg) {
    THROW_RUNTIME_ERROR_WITH_CLEAN_OUTPUT(
      msg << ", at offset " << (ctx->Text - ctx->TextBegin)
    );
  }
}

bool parse(const Pattern& p, ParseTree& tree) {
  std::vector<int> cp;
  transform_utf8_to_unicode(
    p.Expression.begin(), p.Expression.end(), std::back_inserter(cp)
  );

  Context ctx;

  ctx.LiteralMode = p.FixedString;
  ctx.CaseInsensitive = p.CaseInsensitive;

  ctx.TextBegin = ctx.Text = cp.data();
  ctx.TextEnd = ctx.Text + cp.size();

  ctx.Tree = &tree;
  ctx.Tree->init(cp.size());

//  yydebug = 1;
  return yyparse(&ctx) == 0;
}
