%{
#include "parsenode.h"
#include "parsetree.h"
#include "unicode.h"

#include <string>
#include <vector>

namespace {
  static int yylex(void);
  static void yyerror(const char*);

  const int* Text;
  const int* TextBegin;
  const int* TextEnd;

  ParseTree* Tree;

  bool LiteralMode;

  template <class... Args>
  ParseNode* add(const char*, Args&&... args) {
    return Tree->add(args...);
  }
}

%}

%union {
  unsigned int c;
  ParseNode* node;
}

%token <c> CHAR
%token <c> DIGIT
%token <c> NAMED
%token <c> BAD

%type <node> regexp alt concat rep number atom literal charclass charclass_right cc_named
%type <c>    character cc_char cc_char_first

%start regexp

%%

regexp:
  alt
  {
    Tree->Root = $$ = add("regexp", ParseNode::REGEXP, $1);
  }

alt:
  concat
| alt '|' concat
  {
    $$ = add("alt", ParseNode::ALTERNATION, $1, $3);
  }
;

concat:
  rep
| concat rep
  {
    $$ = add("concat", ParseNode::CONCATENATION, $1, $2);
  }
;

rep:
  atom
| atom '*' '?'
  {
    $$ = add("star_ng", ParseNode::REPETITION_NG, $1, 0, UNBOUNDED);
  }
| atom '+' '?'
  {
    $$ = add("plus_ng", ParseNode::REPETITION_NG, $1, 1, UNBOUNDED);
  }
| atom '?' '?'
  {
    $$ = add("question_ng", ParseNode::REPETITION_NG, $1, 0, 1);
  }
| atom '{' number '}' '?'
  {
    $$ = add("repetition_ng", ParseNode::REPETITION_NG, $1, $3->Val, $3->Val);
  }
| atom '{' number ',' '}' '?'
  {
    $$ = add("repetition_ng", ParseNode::REPETITION_NG, $1, $3->Val, UNBOUNDED);
  }
| atom '{' number ',' number '}' '?'
  {
    if ($3->Val > $5->Val) {
      // {n,m} is ill-formed when n > m
      yyerror("syntax error");
    }
    else {
      $$ = add("repetition_ng", ParseNode::REPETITION_NG, $1, $3->Val, $5->Val);
    }
  }
| atom '*'
  {
    $$ = add("star", ParseNode::REPETITION, $1, 0, UNBOUNDED);
  }
| atom '+'
  {
    $$ = add("plus", ParseNode::REPETITION, $1, 1, UNBOUNDED);
  }
| atom '?'
  {
    $$ = add("question", ParseNode::REPETITION, $1, 0, 1);
  }
| atom '{' number '}'
  {
    $$ = add("repetition", ParseNode::REPETITION, $1, $3->Val, $3->Val);
  }
| atom '{' number ',' '}'
  {
    $$ = add("repetition", ParseNode::REPETITION, $1, $3->Val, UNBOUNDED);
  }
| atom '{' number ',' number '}'
  {
    if ($3->Val > $5->Val) {
      // {n,m} is ill-formed when n > m
      yyerror("syntax error");
    }
    else {
      $$ = add("repetition", ParseNode::REPETITION, $1, $3->Val, $5->Val);
    }
  }
;

number:
  DIGIT
  {
    $$ = add("temporary", ParseNode::TEMPORARY, $1 - 48);
  }
| number DIGIT
  {
    $$ = $1;
    $$->Val = $$->Val*10 + ($2 - 48);
  }
;

atom:
  '(' alt ')'
  {
    $$ = $2;
  }
| literal
;

literal:
  character
  {
    $$ = add("literal", ParseNode::LITERAL, $1);
  }
| '.'
  {
    $$ = add("dot", ParseNode::DOT, '.');
  }
| '[' '^' charclass ']'
  {
    $$ = $3;
    $$->Bits.flip();
  }
| '[' charclass ']'
  {
    $$ = $2;
  }
| cc_named
;

character:
  CHAR
| DIGIT
| ']'
  {
    $$ = ']';
  }
| '-'
  {
    $$ = '-';
  }
| '{'
  {
    $$ = '{';
  }
| '}'
  {
    $$ = '}';
  }
| ','
  {
    $$ = ',';
  }
;

charclass:
  cc_char_first '-' cc_char charclass_right
  {
    $$ = $4;
    $$->range($1, $3);
  }
| cc_char_first charclass_right
  {
    $$ = $2;
    $$->Bits.set($1);
  }
| cc_named charclass_right
  {
    $$ = $2;
    $$->Bits |= $1->Bits;
  }
;

charclass_right:
  cc_char '-' cc_char charclass_right
  {
    $$ = $4;
    $$->range($1, $3);
  }
| cc_char charclass_right
  {
    $$ = $2;
    $$->Bits.set($1);
  }
| cc_named charclass_right
  {
    $$ = $2;
    $$->Bits |= $1->Bits;
  }
| /* empty */
  {
    $$ = add("temporary", ParseNode::CHAR_CLASS, 'x');
    $$->Bits['x'] = false;
  }
;

cc_char_first:
  ']'
  {
    $$ = ']';
  }
| cc_char
;

cc_char:
  CHAR
| DIGIT
| '-'
  {
    $$ = '-';
  }
| '|'
  {
    $$ = '|';
  }
| '('
  {
    $$ = '(';
  }
| ')'
  {
    $$ = ')';
  }
| '?'
  {
    $$ = '?';
  }
| '+'
  {
    $$ = '+';
  }
| '*'
  {
    $$ = '*';
  }
| '.'
  {
    $$ = '.';
  }
| '['
  {
    $$ = '[';
  }
| '{'
  {
    $$ = '{';
  }
| '}'
  {
    $$ = '}';
  }
| ','
  {
    $$ = ',';
  }
;

cc_named:
  NAMED
  {
    switch ($1) {
      case 'd':
      {
        $$ = add("charclass", ParseNode::CHAR_CLASS, '0', '9');
        break;
      }
      case 'D':
      {
        $$ = add("charclass", ParseNode::CHAR_CLASS, '0', '9');
        $$->Bits.flip();
        break;
      }
      case 's':
      {
        $$ = add("charclass", ParseNode::CHAR_CLASS, ' ');
        $$->Bits.set('\t');
        $$->Bits.set('\n');
        $$->Bits.set('\f');
        $$->Bits.set('\r');
        break;
      }
      case 'S':
      {
        $$ = add("charclass", ParseNode::CHAR_CLASS, ' ');
        $$->Bits.set('\t');
        $$->Bits.set('\n');
        $$->Bits.set('\f');
        $$->Bits.set('\r');
        $$->Bits.flip();
        break;
      }
      case 'w':
      {
        $$ = add("charclass", ParseNode::CHAR_CLASS, '_');
        $$->range('a', 'z');
        $$->range('A', 'Z');
        $$->range('0', '9');
        break;
      }
      case 'W':
      {
        $$ = add("charclass", ParseNode::CHAR_CLASS, '_');
        $$->range('a', 'z');
        $$->range('A', 'Z');
        $$->range('0', '9');
        $$->Bits.flip();
        break;
      }
    }
  }
;
%%

namespace {
  int parseOctChar(int c) {
    return ('0' <= c && c <= '7') ? c - '0' : -1;
  }

  int consumeOctCode() {
    int oct = 0;
    int digit;

    for (uint32 i = 0; i < 3 && Text < TextEnd; ++i) {
      digit = parseOctChar(*Text);
      if (digit == -1) {
        break;
      }

      oct = (oct << 3) | digit;
      ++Text;
    }

    if (oct > 0377) {
      return BAD;
    }

    yylval.c = oct;
    return CHAR;
  }

  int parseHexChar(int c) {
    int val = -1;
    if ('0' <= c && c <= '9') {
      val = (c - '0');
    }
    else if ('a' <= c && c <= 'f') {
      val = (c - 'a' + 10);
    }
    else if ('A' <= c && c <= 'F') {
      val = (c - 'A' + 10);
    }
    return val;
  }

  int consumeHexCode() {
    if (Text + 1 < TextEnd) {
      int one = *Text++,
          two = *Text++;

      int val = parseHexChar(one),
          ret;
      if (val < 0) {
        return BAD;
      }
      ret = val;
      ret <<= 4;
      val = parseHexChar(two);
      if (val < 0) {
        return BAD;
      }
      ret += val;
      yylval.c = ret;
      return CHAR;
    }
    return BAD;
  }

// FIXME: Add \c.
// FIXME: \b is not parsed correctly---should be backspace (0x08) inside
//  character classes, and a wordbreak assertion elsewhere.
// FIXME: Support \x, \xh?

  int consumeEscape() {
    if (Text >= TextEnd) {
      return BAD;
    }

    const int c = *Text++;
    switch (c) {
      // metacharacters as themselves
      case '|':
      case '(':
      case ')':
      case '?':
      case '+':
      case '*':
      case '.':
      case '[':
      case ']':
      case '^':
      case '-':
      case '{':
      case '}':
      case '\\':
        yylval.c = c;
        return CHAR;

      // ASCII escapes
      case 'a':
        yylval.c = '\a';
        return CHAR;
      case 'e':
        yylval.c = 0x1B;
        return CHAR;
      case 'f':
        yylval.c = '\f';
        return CHAR;
      case 'n':
        yylval.c = '\n';
        return CHAR;
      case 'r':
        yylval.c = '\r';
        return CHAR;
      case 't':
        yylval.c = '\t';
        return CHAR;

      // named character classes
      case 'd':
      case 'D':
      case 's':
      case 'S':
      case 'w':
      case 'W':
        yylval.c = c;
        return NAMED;

      // hexadecimal characters
      case 'x':
        return consumeHexCode();

      // octal characters
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
        --Text;
        return consumeOctCode();

      default:
        return BAD;
    }
  }

  int yylex(void) {
    if (Text < TextEnd) {
      const int c = *Text++;
      if (c < 1 || c > 0x7F) {
        //   -1 indicates bogus UTF-8
        //    0 is a prohibited mid-string null byte
        // > 7F is a code point which is not 7-bit ASCII
        return BAD;
      }
      else if (LiteralMode) {
        yylval.c = c;
        return CHAR;
      }
      else {
        switch (c) {
        case '|':
        case '(':
        case ')':
        case '?':
        case '+':
        case '*':
        case '.':
        case '[':
        case ']':
        case '^':
        case '-':
        case '{':
        case '}':
        case ',':
          return c;
        case '\\':
          return consumeEscape();
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          yylval.c = c;
          return DIGIT;
        default:
          yylval.c = c;
          return CHAR;
        }
      }
    }
    return -1;
  }

  void yyerror(const char* msg) {
    THROW_RUNTIME_ERROR_WITH_OUTPUT(
      msg << ", at offset " << (Text - TextBegin)
    );
  }
}

bool parse(const std::string& text, bool litMode, ParseTree& tree) {
  LiteralMode = litMode;

  std::vector<int> cp;
  transform_utf8_to_unicode(text.begin(), text.end(), std::back_inserter(cp));

  TextBegin = Text = cp.data();
  TextEnd = Text + cp.size();

  Tree = &tree;
  Tree->init(cp.size());

  const int ret = yyparse();

  Text = 0;
  Tree = 0;
  return ret == 0;
}
